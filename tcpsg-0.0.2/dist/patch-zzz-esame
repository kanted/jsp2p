diff -ubwr /usr/ports/net/tcpsg/work/tcpsg-0.0.2/Makefile ./Makefile
--- /usr/ports/net/tcpsg/work/tcpsg-0.0.2/Makefile	2002-10-24 23:37:23.000000000 +0200
+++ ./Makefile	2012-05-19 18:20:56.000000000 +0200
@@ -1,6 +1,8 @@
 CC=				gcc
+LD=		gcc
+LDFLAGS = 	-lssl -lcrypto
 STD=				_GNU_SOURCE
-OBJS=				tcpsg.o
+OBJS=		tcpsg.o SSLSocket.o
 TARGET=			tcpsg
 INSTALL_PATH=	/usr/sbin
 
@@ -9,12 +11,14 @@
 
 all:		$(TARGET)
 
+SSLSocket.o: SSLSocket.h
+
 $(TARGET):	$(OBJS)
-	$(CC) $(OBJS) -o $(TARGET)
+	$(CC) -Wall $(OBJS) $(LDFLAGS) -o $(TARGET)
 
 install: $(TARGET)
 	cp -i $(TARGET) $(INSTALL_PATH)
-	cp tcpsg.conf /etc/tcpsg.conf 
+	cp tcpsg.conf ${PREFIX}/etc/tcpsg.conf 
 clean:
 	rm -f *.o core
 
@@ -23,7 +27,7 @@
 
 uninstall:
 	rm -f $(INSTALL_PATH)/$(TARGET)
-	rm -f /etc/tcpsg.conf
+	rm -f /usr/local/etc/tcpsg.conf
 
 
 
Only in .: SSLSocket.c
Only in .: SSLSocket.h
Only in .: patch-zzz-esame
diff -ubwr /usr/ports/net/tcpsg/work/tcpsg-0.0.2/tcpsg.c ./tcpsg.c
--- /usr/ports/net/tcpsg/work/tcpsg-0.0.2/tcpsg.c	2012-05-19 18:23:02.000000000 +0200
+++ ./tcpsg.c	2012-05-19 18:20:56.000000000 +0200
@@ -43,6 +43,10 @@
 #include <arpa/inet.h>
 #include <netdb.h>
 
+/* Security Headers */
+#include "SSLSocket.h"
+#include <openssl/ssl.h>
+
 /* 
  * ****************************************************************
  * Define section
@@ -66,6 +70,10 @@
 #define WORKING 1
 #define DOWN 2
 
+#define OPTION_STRING_BUFFER 500
+#define KEYFILE_LENGTH 256
+#define PASSWORD_LENGTH 256
+
 
 /*
  * *****************************************************************
@@ -80,7 +88,7 @@
 /* Errors when getting configuration from file /etc/tcpsg.conf */
 
 char *errors[]={"No error","Unable to open file","undefined localport",
-                "undefined serverport","undefined maxclients","undefined servers"};
+                "undefined serverport","undefined maxclients","undefined servers","undefined secure flag","undefined keyfile","undefined password"};
 
 
 static int child_count;
@@ -91,6 +99,9 @@
 	int serverport;
 	char serverhost[MAX_SERVERS][20];
         int num_servers;        
+    int sslflag;
+    char keyfile[KEYFILE_LENGTH];
+    char password[PASSWORD_LENGTH];         
 } main_opt;
 
 
@@ -154,11 +165,11 @@
 int read_config(char *configFileName)
 {
  FILE *configFileHandle;
- char tmpString[500];
+ char tmpString[OPTION_STRING_BUFFER];
  char tmpChar;
  unsigned long configFileLength;
- int lp,sp,mc;
- lp=sp=mc=FALSE;
+ int lp,sp,mc,kf,sf,pw;
+ lp=sp=mc=kf=sf=pw=FALSE;
 
  main_opt.num_servers=0;
  if ((configFileHandle=fopen(configFileName,"rb"))!=NULL) 
@@ -202,11 +213,36 @@
 	   strcpy(main_opt.serverhost[main_opt.num_servers],tmpString);     
            main_opt.num_servers++;
   	 }
+        if (strcasecmp(tmpString, "keyfile") == 0)
+        {
+            bzero(tmpString, OPTION_STRING_BUFFER);
+            bzero(main_opt.keyfile, KEYFILE_LENGTH);
+            fscanf(configFileHandle, "%s", tmpString);
+            strncpy(main_opt.keyfile, tmpString, KEYFILE_LENGTH);
+            kf = TRUE;
+        }
+        if (strcasecmp(tmpString, "password") == 0)
+        {
+            bzero(tmpString, OPTION_STRING_BUFFER);
+            bzero(main_opt.password, PASSWORD_LENGTH);
+            fscanf(configFileHandle, "%s", tmpString);
+            strncpy(main_opt.password, tmpString, PASSWORD_LENGTH);
+            pw = TRUE;
+        }
+        if (strcasecmp(tmpString, "sslflag") == 0)
+        {
+            fscanf(configFileHandle, "%s", tmpString);
+            main_opt.sslflag = atoi(tmpString);
+            sf = TRUE;
+        }
        }
         if (!lp) return 2;
         if (!sp) return 3;
         if (!mc) return 4;
         if (main_opt.num_servers==0) return 5;
+        if (!sf) return 6;
+        if (!kf) return 7;
+        if (!pw) return 8;
   }
  else
  {
@@ -229,7 +265,7 @@
 int set_config()
 {
   int i,j;
-  i=read_config("/usr/local/etc/tcpsg.conf");
+  i=read_config("%%PREFIX%%/etc/tcpsg.conf");
   if (i==0)
   {
     for (i=0;i<main_opt.num_servers;i++)
@@ -303,6 +339,93 @@
 }
 
 /*
+ * Secure transfers with clients establishing an SSL connection.
+ * Redirect of all decyphred data to the real server.
+ * There is a separate instance of this function for
+ * each connection.
+ *
+ * Returns: 0 if OK. A negative value on errors.
+ *
+ */
+int secureRedirect(int clientSocket, char* serv_address, int* serv_portno)
+{
+    struct SSLSocket* secureSocket;
+    int error;
+    fd_set fileDescriptors;
+    char buffer[BUFFER_SIZE]; /* Buffer to forward data */
+    int serverSocket;
+    int nbytes = 0;
+    if((serverSocket = connect_to(serv_address, serv_portno)) < 0)
+        return serverSocket;
+    memset(&buffer, 0, BUFFER_SIZE);
+    secureSocket = SSLOpen(clientSocket, main_opt.keyfile, main_opt.password, NULL);
+    if(secureSocket == NULL)
+        return -1;
+    if((error = SSLAccept(secureSocket)) <= 0)
+        return error;
+    while(TRUE)
+    {
+        FD_ZERO(&fileDescriptors);
+        FD_SET(serverSocket, &fileDescriptors);
+        FD_SET(clientSocket, &fileDescriptors);
+        select(FD_SETSIZE, &fileDescriptors, NULL, NULL, NULL);
+        if(FD_ISSET(clientSocket, &fileDescriptors))
+        {
+            // Secure read from client and write to server...
+            nbytes = SSLRead(secureSocket, buffer, BUFFER_SIZE);
+            error = SSLGetError(secureSocket,nbytes);
+            if(error != SSL_ERROR_NONE)
+            {
+                if(error == SSL_ERROR_ZERO_RETURN)
+                    break; //client socket closed
+                else
+                {
+                    writemsg("SSL read problem");
+                    goto exceptionHandler;
+                }
+            }
+            if((nbytes = send(serverSocket, buffer, nbytes, 0)) < 1 )
+            {
+                writemsg("Send error");
+                goto exceptionHandler;
+            }
+        }
+        if(FD_ISSET(serverSocket, &fileDescriptors))
+        {
+            // Read from server and secure write to client...
+            if((nbytes = recv(serverSocket, buffer, BUFFER_SIZE, 0)) < 1)
+            {
+                writemsg("Recv error");
+                goto exceptionHandler;
+            }
+            error = SSLWrite(secureSocket, buffer, nbytes);
+            error = SSLGetError(secureSocket, error);
+            if(error != SSL_ERROR_NONE)
+            {
+                if(error == SSL_ERROR_ZERO_RETURN)
+                    break; //client socket closed
+                else
+                {
+                    writemsg("SSL write problem");
+                    goto exceptionHandler;
+                }
+            }
+        }
+        bzero (buffer, BUFFER_SIZE);
+    }
+    SSLClose(secureSocket);
+    close(clientSocket);
+    close(serverSocket);
+    return 0;
+
+exceptionHandler:
+    SSLClose(secureSocket);
+    close(clientSocket);
+    close(serverSocket);
+    return -1;  
+}
+
+/*
  * Redirect all arriving data to the real server.
  * There is a separate instance of this function for
  * each connection.
@@ -463,9 +586,16 @@
                     }
                     state[server_id]=WORKING; 
 
-                   if (redirect(connfd, main_opt.serverhost[server_id], 
-                                          &main_opt.serverport) < 0)
+                    if (main_opt.sslflag)
+                    {
+                        if(secureRedirect(connfd, main_opt.serverhost[server_id], &main_opt.serverport) < 0)
+                            writemsg("Failed to attempt to secure redirect data");
+                    }
+                    else
+                    {
+                        if(redirect(connfd, main_opt.serverhost[server_id], &main_opt.serverport) < 0)
                          writemsg("Failed attempting to redirect data");
+                    }
    				close(connfd);			/* Child closes his connected socket */
                     state[server_id]=IDLE;  
 
diff -ubwr /usr/ports/net/tcpsg/work/tcpsg-0.0.2/tcpsg.conf ./tcpsg.conf
--- /usr/ports/net/tcpsg/work/tcpsg-0.0.2/tcpsg.conf	2002-10-25 00:24:01.000000000 +0200
+++ ./tcpsg.conf	2012-05-19 18:20:56.000000000 +0200
@@ -19,5 +19,16 @@
 # used to select each server. The first server in the list has the highest 
 # priority and the last has the lowest priority.
 
-server 192.168.0.1
 server 127.0.0.1 
+
+# If 1 enables SSL connection between client and tcpsg.
+
+sslflag 1
+
+# Keyfile contains server certificate and private key.
+
+keyfile server.pem
+
+# Keyfile password.
+
+password abcd
