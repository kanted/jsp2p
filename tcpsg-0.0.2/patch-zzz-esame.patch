diff -uwbrN /usr/ports/net/tcpsg/work/tcpsg-0.0.2/Makefile ./Makefile
--- /usr/ports/net/tcpsg/work/tcpsg-0.0.2/Makefile	2002-10-24 23:37:23.000000000 +0200
+++ ./Makefile	2012-06-22 15:27:20.000000000 +0200
@@ -1,6 +1,7 @@
 CC=				gcc
+LDFLAGS = 	-lssl -lcrypto
 STD=				_GNU_SOURCE
-OBJS=				tcpsg.o
+OBJS=		tcpsg.o SSLSocket.o
 TARGET=			tcpsg
 INSTALL_PATH=	/usr/sbin
 
@@ -9,12 +10,14 @@
 
 all:		$(TARGET)
 
+SSLSocket.o: SSLSocket.h
+
 $(TARGET):	$(OBJS)
-	$(CC) $(OBJS) -o $(TARGET)
+	$(CC) -Wall $(OBJS) $(LDFLAGS) -o $(TARGET)
 
 install: $(TARGET)
 	cp -i $(TARGET) $(INSTALL_PATH)
-	cp tcpsg.conf /etc/tcpsg.conf 
+	cp tcpsg.conf ${PREFIX}/etc/tcpsg.conf 
 clean:
 	rm -f *.o core
 
@@ -23,7 +26,7 @@
 
 uninstall:
 	rm -f $(INSTALL_PATH)/$(TARGET)
-	rm -f /etc/tcpsg.conf
+	rm -f ${PREFIX}/etc/tcpsg.conf
 
 
 
diff -uwbrN /usr/ports/net/tcpsg/work/tcpsg-0.0.2/SSLSocket.c ./SSLSocket.c
--- /usr/ports/net/tcpsg/work/tcpsg-0.0.2/SSLSocket.c	1970-01-01 01:00:00.000000000 +0100
+++ ./SSLSocket.c	2012-06-22 15:27:20.000000000 +0200
@@ -0,0 +1,108 @@
+#include "SSLSocket.h"
+
+struct SSLSocket
+{
+    SSL* ssl;
+    SSL_CTX* ctx;
+};
+
+static char* staticPassword;
+  
+static int passwordCopy(char* buffer, int n, int rwFlag, void* userData)
+{
+    int len = strlen(staticPassword);
+    if(n < len + 1) return 0;
+    strcpy(buffer, staticPassword);
+    return len;
+}
+
+/* Initialize a secure socket*/
+struct SSLSocket* SSLOpen(int baseSocket, char* keyFile, char* password, char* caFile)
+{
+    SSL_METHOD* method;
+    BIO* sbio;
+    SSL_library_init();
+    SSL_load_error_strings();
+    method = SSLv23_method();
+    struct SSLSocket* secureSocket = malloc(sizeof(struct SSLSocket));
+    secureSocket->ctx = SSL_CTX_new(method);
+    if(!(SSL_CTX_use_certificate_chain_file(secureSocket->ctx, keyFile))){
+        printf("SSL: Error reading certificate in %s\n",keyFile);
+        goto exceptionHandler;
+    }
+    staticPassword = password;
+    SSL_CTX_set_default_passwd_cb(secureSocket->ctx, passwordCopy);
+    if(!(SSL_CTX_use_PrivateKey_file(secureSocket->ctx, keyFile, SSL_FILETYPE_PEM)))
+    {
+        printf("SSL: Error reading private key\n");
+        goto exceptionHandler;
+    }
+    if((caFile!=NULL) && !(SSL_CTX_load_verify_locations(secureSocket->ctx, caFile, 0)))
+    {
+        printf("SSL: Error loading CA\n");
+        goto exceptionHandler;
+    }
+    sbio = BIO_new_socket(baseSocket, BIO_NOCLOSE);
+    secureSocket->ssl = SSL_new(secureSocket->ctx);
+    if(secureSocket->ssl == NULL){
+        printf("SSL: Error initializing secure socket\n");
+        goto exceptionHandler;
+    }
+    SSL_set_bio(secureSocket->ssl, sbio, sbio);
+    return secureSocket;
+
+    exceptionHandler:
+        SSL_CTX_free(secureSocket->ctx);
+        free(secureSocket);
+        return NULL;
+}
+
+int SSLAccept(struct SSLSocket* secureSocket)
+{
+    return SSL_accept(secureSocket->ssl);
+}
+
+int SSLConnect(struct SSLSocket* secureSocket)
+{
+    return SSL_connect(secureSocket->ssl);
+}
+
+
+int SSLRead(struct SSLSocket* secureSocket, void* buffer, int bufferSize)
+{
+    return SSL_read(secureSocket->ssl, buffer, bufferSize);
+}
+
+int SSLGetError(struct SSLSocket* secureSocket, int err)
+{
+    return SSL_get_error(secureSocket->ssl, err);
+}
+
+int SSLWrite(struct SSLSocket* secureSocket, void* buffer, int bufferSize)
+{
+    return  SSL_write(secureSocket->ssl, buffer, bufferSize);
+}
+
+int checkCertificate(struct SSLSocket* secureSocket, char* hostname)
+{
+    X509 *peer;
+    char peer_CN[256];    
+    if(SSL_get_verify_result(secureSocket->ssl)!=X509_V_OK){
+         return -1;
+    }
+    peer=SSL_get_peer_certificate(secureSocket->ssl);
+    X509_NAME_get_text_by_NID(X509_get_subject_name(peer),NID_commonName, peer_CN, 256);
+    if(strcasecmp(peer_CN,hostname)){
+        return -1;
+    }
+    return 0;
+}
+
+/* Destroy a secure socket*/
+void SSLClose(struct SSLSocket* secureSocket)
+{
+    SSL_shutdown(secureSocket->ssl);
+    SSL_free(secureSocket->ssl);
+    SSL_CTX_free(secureSocket->ctx);
+    free(secureSocket);
+}
diff -uwbrN /usr/ports/net/tcpsg/work/tcpsg-0.0.2/SSLSocket.h ./SSLSocket.h
--- /usr/ports/net/tcpsg/work/tcpsg-0.0.2/SSLSocket.h	1970-01-01 01:00:00.000000000 +0100
+++ ./SSLSocket.h	2012-06-22 15:27:20.000000000 +0200
@@ -0,0 +1,37 @@
+#ifndef SSL_SOCKET_H
+#define SSL_SOCKET_H
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <netinet/tcp.h>
+#include <netdb.h>
+#include <fcntl.h>
+#include <signal.h>
+#include <unistd.h>
+#include <string.h>
+
+#include <openssl/ssl.h>
+
+struct SSLSocket;
+
+struct SSLSocket* SSLOpen(int baseSocket, char* keyFile, char* password, char* caFile);
+
+int SSLAccept(struct SSLSocket* secureSocket);
+
+int SSLConnect(struct SSLSocket* secureSocket);
+
+int SSLRead(struct SSLSocket* secureSocket, void* buffer, int bufferSize);
+
+int SSLGetError(struct SSLSocket* secureSocket, int err);
+
+int SSLWrite(struct SSLSocket* secureSocket, void* buffer, int bufferSize);
+
+int checkCertificate(struct SSLSocket* secureSocket, char* hostname);
+
+void SSLClose(struct SSLSocket* secureSocket);
+
+#endif
diff -uwbrN /usr/ports/net/tcpsg/work/tcpsg-0.0.2/tcpsg.c ./tcpsg.c
--- /usr/ports/net/tcpsg/work/tcpsg-0.0.2/tcpsg.c	2012-06-22 15:24:19.000000000 +0200
+++ ./tcpsg.c	2012-06-22 15:27:20.000000000 +0200
@@ -43,6 +43,10 @@
 #include <arpa/inet.h>
 #include <netdb.h>
 
+/* Security Headers */
+#include "SSLSocket.h"
+#include <openssl/ssl.h>
+
 /* 
  * ****************************************************************
  * Define section
@@ -80,7 +84,7 @@
 /* Errors when getting configuration from file /etc/tcpsg.conf */
 
 char *errors[]={"No error","Unable to open file","undefined localport",
-                "undefined serverport","undefined maxclients","undefined servers"};
+                "undefined serverport","undefined maxclients","undefined servers","undefined secure flag","undefined keyfile","undefined password"};
 
 
 static int child_count;
@@ -91,6 +95,9 @@
 	int serverport;
 	char serverhost[MAX_SERVERS][20];
         int num_servers;        
+    int sslflag;
+    char keyfile[256];
+    char password[256];         
 } main_opt;
 
 
@@ -157,8 +164,8 @@
  char tmpString[500];
  char tmpChar;
  unsigned long configFileLength;
- int lp,sp,mc;
- lp=sp=mc=FALSE;
+ int lp,sp,mc,kf,sf,pw;
+ lp=sp=mc=kf=sf=pw=FALSE;
 
  main_opt.num_servers=0;
  if ((configFileHandle=fopen(configFileName,"rb"))!=NULL) 
@@ -202,11 +209,36 @@
 	   strcpy(main_opt.serverhost[main_opt.num_servers],tmpString);     
            main_opt.num_servers++;
   	 }
+        if (strcasecmp(tmpString, "keyfile") == 0)
+        {
+            bzero(tmpString, sizeof(tmpString));
+            bzero(main_opt.keyfile, sizeof(main_opt.keyfile));
+            fscanf(configFileHandle, "%s", tmpString);
+            strncpy(main_opt.keyfile, tmpString, sizeof(main_opt.keyfile));
+            kf = TRUE;
+        }
+        if (strcasecmp(tmpString, "password") == 0)
+        {
+            bzero(tmpString, sizeof(tmpString));
+            bzero(main_opt.password, sizeof(main_opt.password));
+            fscanf(configFileHandle, "%s", tmpString);
+            strncpy(main_opt.password, tmpString, sizeof(main_opt.password));
+            pw = TRUE;
+        }
+        if (strcasecmp(tmpString, "sslflag") == 0)
+        {
+            fscanf(configFileHandle, "%s", tmpString);
+            main_opt.sslflag = atoi(tmpString);
+            sf = TRUE;
+        }
        }
         if (!lp) return 2;
         if (!sp) return 3;
         if (!mc) return 4;
         if (main_opt.num_servers==0) return 5;
+        if (!sf) return 6;
+        if (!kf) return 7;
+        if (!pw) return 8;
   }
  else
  {
@@ -303,6 +335,93 @@
 }
 
 /*
+ * Secure transfers with clients establishing an SSL connection.
+ * Redirect of all decyphred data to the real server.
+ * There is a separate instance of this function for
+ * each connection.
+ *
+ * Returns: 0 if OK. A negative value on errors.
+ *
+ */
+int secureRedirect(int clientSocket, char* serv_address, int* serv_portno)
+{
+    struct SSLSocket* secureSocket;
+    int error;
+    fd_set fileDescriptors;
+    char buffer[BUFFER_SIZE]; /* Buffer to forward data */
+    int serverSocket;
+    int nbytes = 0;
+    if((serverSocket = connect_to(serv_address, serv_portno)) < 0)
+        return serverSocket;
+    memset(&buffer, 0, BUFFER_SIZE);
+    secureSocket = SSLOpen(clientSocket, main_opt.keyfile, main_opt.password, NULL);
+    if(secureSocket == NULL)
+        return -1;
+    if((error = SSLAccept(secureSocket)) <= 0)
+        return error;
+    while(TRUE)
+    {
+        FD_ZERO(&fileDescriptors);
+        FD_SET(serverSocket, &fileDescriptors);
+        FD_SET(clientSocket, &fileDescriptors);
+        select(FD_SETSIZE, &fileDescriptors, NULL, NULL, NULL);
+        if(FD_ISSET(clientSocket, &fileDescriptors))
+        {
+            // Secure read from client and write to server...
+            nbytes = SSLRead(secureSocket, buffer, BUFFER_SIZE);
+            error = SSLGetError(secureSocket,nbytes);
+            if(error != SSL_ERROR_NONE)
+            {
+                if(error == SSL_ERROR_ZERO_RETURN)
+                    break; //client socket closed
+                else
+                {
+                    writemsg("SSL read problem");
+                    goto exceptionHandler;
+                }
+            }
+            if((nbytes = send(serverSocket, buffer, nbytes, 0)) < 1 )
+            {
+                writemsg("Send error");
+                goto exceptionHandler;
+            }
+        }
+        if(FD_ISSET(serverSocket, &fileDescriptors))
+        {
+            // Read from server and secure write to client...
+            if((nbytes = recv(serverSocket, buffer, BUFFER_SIZE, 0)) < 1)
+            {
+                writemsg("Recv error");
+                goto exceptionHandler;
+            }
+            error = SSLWrite(secureSocket, buffer, nbytes);
+            error = SSLGetError(secureSocket, error);
+            if(error != SSL_ERROR_NONE)
+            {
+                if(error == SSL_ERROR_ZERO_RETURN)
+                    break; //client socket closed
+                else
+                {
+                    writemsg("SSL write problem");
+                    goto exceptionHandler;
+                }
+            }
+        }
+        bzero (buffer, BUFFER_SIZE);
+    }
+    SSLClose(secureSocket);
+    close(clientSocket);
+    close(serverSocket);
+    return 0;
+
+exceptionHandler:
+    SSLClose(secureSocket);
+    close(clientSocket);
+    close(serverSocket);
+    return -1;  
+}
+
+/*
  * Redirect all arriving data to the real server.
  * There is a separate instance of this function for
  * each connection.
@@ -463,9 +582,16 @@
                     }
                     state[server_id]=WORKING; 
 
-                   if (redirect(connfd, main_opt.serverhost[server_id], 
-                                          &main_opt.serverport) < 0)
+                    if (main_opt.sslflag)
+                    {
+                        if(secureRedirect(connfd, main_opt.serverhost[server_id], &main_opt.serverport) < 0)
+                            writemsg("Failed to attempt to secure redirect data");
+                    }
+                    else
+                    {
+                        if(redirect(connfd, main_opt.serverhost[server_id], &main_opt.serverport) < 0)
                          writemsg("Failed attempting to redirect data");
+                    }
    				close(connfd);			/* Child closes his connected socket */
                     state[server_id]=IDLE;  
 
diff -uwbrN /usr/ports/net/tcpsg/work/tcpsg-0.0.2/tcpsg.conf ./tcpsg.conf
--- /usr/ports/net/tcpsg/work/tcpsg-0.0.2/tcpsg.conf	2002-10-25 00:24:01.000000000 +0200
+++ ./tcpsg.conf	2012-06-22 15:27:20.000000000 +0200
@@ -19,5 +19,16 @@
 # used to select each server. The first server in the list has the highest 
 # priority and the last has the lowest priority.
 
-server 192.168.0.1
 server 127.0.0.1 
+
+# If 1 enables SSL connection between client and tcpsg.
+
+sslflag 1
+
+# Keyfile contains server certificate and private key.
+
+keyfile server.pem
+
+# Keyfile password.
+
+password abcd
